/*
 * This class can be safely deleted from your org.
 * It was only used to ensure 100% test coverage
 * for the managed package installation.
 */

@IsTest
private class InstallationTests {

    static testmethod void testMaintenanceRequest() {
        // MaintenanceRequestHelper.updateWorkOrders();
        List<Case> rprMantnceReqsInsLst = TestDataFactory.createMaintanceRequest(100, 'Repair');
        List<Case> rtnMantnceReqsInsLst = TestDataFactory.createMaintanceRequest(150, 'Routine Maintenance');
        INSERT rprMantnceReqsInsLst;
        INSERT rtnMantnceReqsInsLst;
        List<Case> mantnceReqsUpdLst = new List<Case>();
        for(Case mantnceReq : rprMantnceReqsInsLst){
            mantnceReq.status='Closed';
            mantnceReqsUpdLst.add(mantnceReq);
        }
        for(Case mantnceReq : rtnMantnceReqsInsLst){
            mantnceReq.status='Closed';
            mantnceReqsUpdLst.add(mantnceReq);
        }

        // Perform test
        Test.startTest();
        UPDATE mantnceReqsUpdLst;
        // Verify
        System.assertEquals(250, mantnceReqsUpdLst.size());
        Test.stopTest();
    }

    static testmethod void testWarehouseSync() {
        // Schedule the test job
        Test.startTest();
        String CRON = '0 0 1 * * ?';
        Test.setMock(HttpCalloutMock.class, new WarehouseCalloutServiceMock());
        String jobId = System.schedule('WarehouseSyncScheduleTest', CRON, new WarehouseSyncSchedule());
        // Stopping the test will run the job synchronously
        CronTrigger ct = [SELECT Id, CronExpression, TimesTriggered, NextFireTime FROM CronTrigger WHERE Id = :jobId];
        System.assertEquals(CRON, ct.CronExpression);
        Test.stopTest();
    }
}